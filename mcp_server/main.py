# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:17:08+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path

from models import (
    FieldAdminMappingsFindByMetadataPostRequest,
    FieldAdminMappingsFindByMetadataPostResponse,
    FieldAdminMappingsGetResponse,
    FieldAdminMappingsPostRequest,
    FieldAdminMappingsPostResponse,
    FieldAdminMappingsRemoveByMetadataPostRequest,
    FieldAdminMappingsStubMappingIdGetResponse,
    FieldAdminMappingsStubMappingIdPutRequest,
    FieldAdminMappingsStubMappingIdPutResponse,
    FieldAdminNearMissesRequestPatternPostRequest,
    FieldAdminNearMissesRequestPatternPostResponse,
    FieldAdminNearMissesRequestPostRequest,
    FieldAdminNearMissesRequestPostResponse,
    FieldAdminRecordingsSnapshotPostRequest,
    FieldAdminRecordingsSnapshotPostResponse,
    FieldAdminRecordingsStartPostRequest,
    FieldAdminRecordingsStatusGetResponse,
    FieldAdminRecordingsStopPostResponse,
    FieldAdminRequestsCountPostRequest,
    FieldAdminRequestsCountPostResponse,
    FieldAdminRequestsFindPostRequest,
    FieldAdminRequestsRemoveByMetadataPostRequest,
    FieldAdminRequestsRemovePostRequest,
    FieldAdminRequestsUnmatchedNearMissesGetResponse,
    FieldAdminScenariosGetResponse,
    FieldAdminSettingsPostRequest,
)

app = MCPProxy(
    title='WireMock',
    version='2.35.0',
    servers=[{'url': '/'}],
)


@app.delete('/__admin/mappings', tags=['stub_mapping_operations'])
def delete___admin_mappings():
    """
    Delete all stub mappings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/__admin/mappings', tags=['stub_mapping_operations'])
def get___admin_mappings(limit: Optional[int] = None, offset: Optional[int] = None):
    """
    Get all stub mappings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/__admin/mappings', tags=['stub_mapping_operations'])
def post___admin_mappings(body: FieldAdminMappingsPostRequest = None):
    """
    Create a new stub mapping
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/mappings/find-by-metadata',
    description=""" Find stubs by matching on their metadata """,
    tags=[
        'stub_mapping_operations',
        'request_journal_operations',
        'admin_interface_management',
    ],
)
def post___admin_mappings_find_by_metadata(
    body: FieldAdminMappingsFindByMetadataPostRequest,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/mappings/import',
    description=""" Import given stub mappings to the backing store """,
    tags=['stub_mapping_operations'],
)
def post___admin_mappings_import():
    """
    Import stub mappings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/mappings/remove-by-metadata',
    tags=['stub_mapping_operations', 'admin_interface_management'],
)
def post___admin_mappings_remove_by_metadata(
    body: FieldAdminMappingsRemoveByMetadataPostRequest = None,
):
    """
    Delete stub mappings matching metadata
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/mappings/reset',
    description=""" Restores stub mappings to the defaults defined back in the backing store """,
    tags=[
        'stub_mapping_operations',
        'admin_interface_management',
        'admin_scenario_control',
    ],
)
def post___admin_mappings_reset():
    """
    Reset stub mappings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/mappings/save',
    description=""" Save all persistent stub mappings to the backing store """,
    tags=['stub_mapping_operations'],
)
def post___admin_mappings_save():
    """
    Persist stub mappings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/__admin/mappings/{stubMappingId}', tags=['stub_mapping_operations'])
def delete___admin_mappings__stub_mapping_id(
    stub_mapping_id: str = Path(..., alias='stubMappingId')
):
    """
    Delete a stub mapping
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/__admin/mappings/{stubMappingId}', tags=['stub_mapping_operations'])
def get___admin_mappings__stub_mapping_id(
    stub_mapping_id: str = Path(..., alias='stubMappingId')
):
    """
    Get stub mapping by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/__admin/mappings/{stubMappingId}', tags=['stub_mapping_operations'])
def put___admin_mappings__stub_mapping_id(
    stub_mapping_id: str = Path(..., alias='stubMappingId'),
    body: FieldAdminMappingsStubMappingIdPutRequest = None,
):
    """
    Update a stub mapping
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/near-misses/request',
    description=""" Find at most 3 near misses for closest stub mappings to the specified request """,
    tags=['near_miss_tracking', 'request_journal_operations'],
)
def post___admin_near_misses_request(body: FieldAdminNearMissesRequestPostRequest):
    """
    Find near misses matching specific request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/near-misses/request-pattern',
    description=""" Find at most 3 near misses for closest logged requests to the specified request pattern """,
    tags=['near_miss_tracking'],
)
def post___admin_near_misses_request_pattern(
    body: FieldAdminNearMissesRequestPatternPostRequest,
):
    """
    Find near misses matching request pattern
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/__admin/recordings/snapshot', tags=['recording_control'])
def post___admin_recordings_snapshot(body: FieldAdminRecordingsSnapshotPostRequest):
    """
    Take a snapshot recording
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/recordings/start',
    description=""" Begin recording stub mappings """,
    tags=['recording_control', 'admin_interface_management'],
)
def post___admin_recordings_start(body: FieldAdminRecordingsStartPostRequest):
    """
    Start recording
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/__admin/recordings/status', tags=['recording_control'])
def get___admin_recordings_status():
    """
    Get recording status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/recordings/stop',
    description=""" End recording of stub mappings """,
    tags=['recording_control'],
)
def post___admin_recordings_stop():
    """
    Stop recording
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/__admin/requests',
    tags=['request_journal_operations', 'admin_interface_management'],
)
def delete___admin_requests():
    """
    Delete all requests in journal
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/__admin/requests', tags=['request_journal_operations'])
def get___admin_requests(limit: Optional[str] = None, since: Optional[str] = None):
    """
    Get all requests in journal
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/requests/count',
    description=""" Count requests logged in the journal matching the specified criteria """,
    tags=['request_journal_operations', 'admin_interface_management'],
)
def post___admin_requests_count(body: FieldAdminRequestsCountPostRequest):
    """
    Count requests by criteria
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/requests/find',
    description=""" Retrieve details of requests logged in the journal matching the specified criteria """,
    tags=['request_journal_operations'],
)
def post___admin_requests_find(body: FieldAdminRequestsFindPostRequest):
    """
    Find requests by criteria
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/requests/remove',
    description=""" Removed requests logged in the journal matching the specified criteria """,
    tags=['request_journal_operations', 'admin_interface_management'],
)
def post___admin_requests_remove(body: FieldAdminRequestsRemovePostRequest):
    """
    Remove requests by criteria
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/requests/remove-by-metadata',
    tags=['stub_mapping_operations', 'request_journal_operations'],
)
def post___admin_requests_remove_by_metadata(
    body: FieldAdminRequestsRemoveByMetadataPostRequest = None,
):
    """
    Delete requests mappings matching metadata
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/requests/reset',
    tags=['request_journal_operations', 'admin_interface_management'],
)
def post___admin_requests_reset():
    """
    Empty the request journal
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/__admin/requests/unmatched',
    description=""" Get details of logged requests that weren't matched by any stub mapping """,
    tags=['request_journal_operations', 'near_miss_tracking'],
)
def get___admin_requests_unmatched():
    """
    Find unmatched requests
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/__admin/requests/unmatched/near-misses',
    description=""" Retrieve near-misses for all unmatched requests """,
    tags=['admin_interface_management'],
)
def get___admin_requests_unmatched_near_misses():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/__admin/requests/{requestId}',
    tags=['request_journal_operations', 'stub_mapping_operations'],
)
def delete___admin_requests__request_id(request_id: str = Path(..., alias='requestId')):
    """
    Delete request by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/__admin/requests/{requestId}', tags=['request_journal_operations'])
def get___admin_requests__request_id(request_id: str = Path(..., alias='requestId')):
    """
    Get request by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/reset',
    description=""" Reset mappings to the default state and reset the request journal """,
    tags=[
        'admin_interface_management',
        'request_journal_operations',
        'admin_scenario_control',
    ],
)
def post___admin_reset():
    """
    Reset mappings and request journal
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/__admin/scenarios', tags=['admin_interface_management', 'admin_scenario_control']
)
def get___admin_scenarios():
    """
    Get all scenarios
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/scenarios/reset',
    tags=['admin_interface_management', 'admin_scenario_control'],
)
def post___admin_scenarios_reset():
    """
    Reset the state of all scenarios
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/settings', tags=['global_admin_settings', 'admin_interface_management']
)
def post___admin_settings(body: FieldAdminSettingsPostRequest):
    """
    Update global settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/__admin/shutdown',
    description=""" Shutdown the WireMock server """,
    tags=['admin_interface_management'],
)
def post___admin_shutdown():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
